name: RDP Gaming Server Windows (Aggressive Software MAX-BOOST)

on:
  workflow_dispatch:

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  KEEPALIVE_ITER: 432  # 432 * 10 min = 72h

jobs:
  rdp-gaming-boost:
    runs-on: windows-2022
    timeout-minutes: 4320  # 72h

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: NOTICE - Terms & Limits
        shell: pwsh
        run: |
          Write-Host "ATENȚIE: Acest workflow aplică doar optimizări software legitime."
          Write-Host "Nu încercăm passthrough hardware sau altceva neautorizat."

      - name: Activate Remote Desktop
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Ensure runneradmin user exists & export creds
        shell: pwsh
        run: |
          function GenPass { -join ((33..126) | Get-Random -Count 16 | % {[char]$_}) }
          $user = "runneradmin"
          $existing = Get-LocalUser -Name $user -ErrorAction SilentlyContinue
          if (-not $existing) {
            $secureNew = ConvertTo-SecureString (GenPass) -AsPlainText -Force
            try { New-LocalUser -Name $user -Password $secureNew -FullName "Runner Admin" -Description "Auto-created" } catch {}
            try { Add-LocalGroupMember -Group "Administrators" -Member $user } catch {}
          }
          $newPass = GenPass
          $secure = ConvertTo-SecureString $newPass -AsPlainText -Force
          Set-LocalUser -Name $user -Password $secure
          Write-Output "RUNNERADMIN_USER=$user" >> $env:GITHUB_ENV
          Write-Output "RUNNERADMIN_PASS=$newPass" >> $env:GITHUB_ENV
          Write-Host "Created/updated user: $user"

      - name: Install Core Runtimes (DirectX / .NET / VC++)
        shell: pwsh
        run: |
          $t = $env:TEMP
          # DirectX
          $dx = Join-Path $t "dx_redist.exe"
          Invoke-WebRequest -Uri "https://download.microsoft.com/download/1/1/8/1187A7B7-6B28-42B2-A39B-33A3E0A1F7E0/directx_Jun2010_redist.exe" -OutFile $dx
          Start-Process -FilePath $dx -ArgumentList "/Q" -Wait
          # .NET Framework 4.8
          $dn = Join-Path $t "ndp48.exe"
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2088631" -OutFile $dn
          Start-Process -FilePath $dn -ArgumentList "/q","/norestart" -Wait
          # VC++ redistributables
          $vcx86 = Join-Path $t "vc_redist.x86.exe"
          $vcx64 = Join-Path $t "vc_redist.x64.exe"
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vc_redist.x86.exe" -OutFile $vcx86
          Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vc_redist.x64.exe" -OutFile $vcx64
          Start-Process -FilePath $vcx86 -ArgumentList "/install","/quiet","/norestart" -Wait
          Start-Process -FilePath $vcx64 -ArgumentList "/install","/quiet","/norestart" -Wait

      - name: Aggressive Power/Registry/Services Tweaks
        shell: pwsh
        run: |
          powercfg /S SCHEME_MIN
          # Game Mode & disable Game DVR
          reg add "HKCU\SOFTWARE\Microsoft\GameBar" /v AutoGameModeEnabled /t REG_DWORD /d 1 /f
          reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows\GameDVR" /v AllowGameDVR /t REG_DWORD /d 0 /f
          # Multimedia scheduler tweaks
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" /v SystemResponsiveness /t REG_DWORD /d 0 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v Priority /t REG_DWORD /d 6 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v "GPU Priority" /t REG_DWORD /d 8 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrDelay /t REG_DWORD /d 10 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrLevel /t REG_DWORD /d 0 /f
          $svcList = @("WSearch","SysMain","WaaSMedicSvc","DiagTrack","WerSvc")
          foreach ($s in $svcList) {
            if (Get-Service -Name $s -ErrorAction SilentlyContinue) {
              Set-Service -Name $s -StartupType Disabled
              Stop-Service -Name $s -Force
            }
          }

      - name: Install SwiftShader (Software Renderer)
        shell: pwsh
        run: |
          $t = Join-Path $env:TEMP "swiftshader"
          New-Item -Path $t -ItemType Directory -Force
          $zip = Join-Path $env:TEMP "SwiftShader-Release.zip"
          Invoke-WebRequest -Uri "https://github.com/google/swiftshader/releases/latest/download/SwiftShader-Release.zip" -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $t -Force
          $fallback = "C:\Games\GPU_SoftwareFallback"
          New-Item -Path $fallback -ItemType Directory -Force
          Get-ChildItem -Path $t -Filter "*.dll" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination $fallback -Force }

      - name: Create launch helper
        shell: pwsh
        run: |
          $script = @'
param(
  [string]$GameExe = "C:\Program Files (x86)\Steam\steamapps\common\My Summer Car\MySummerCar.exe",
  [switch]$UseSwift
)
if ($UseSwift) {
  $src = "C:\Games\GPU_SoftwareFallback"
  if (Test-Path $src) {
    Get-ChildItem $src -Filter *.dll | ForEach-Object { Copy-Item -Path $_.FullName -Destination (Split-Path $GameExe) -Force }
  }
}
Start-Process -FilePath $GameExe
Start-Sleep -Seconds 4
$p = Get-Process -Name "MySummerCar" -ErrorAction SilentlyContinue
if ($p) { $p.PriorityClass = "High" }
'@
          $path = "C:\Games\launch_msc_boost.ps1"
          New-Item -Path (Split-Path $path) -ItemType Directory -Force
          Set-Content -Path $path -Value $script -Force -Encoding UTF8

      - name: Install Parsec (optional streaming)
        shell: pwsh
        run: |
          $pUrl = "https://builds.parsecgaming.com/parsec-windows.exe"
          $pExe = Join-Path $env:TEMP "parsec-windows.exe"
          Invoke-WebRequest -Uri $pUrl -OutFile $pExe
          Start-Process -FilePath $pExe -ArgumentList "/S" -Wait

      - name: Install Tailscale (optional)
        shell: pwsh
        run: |
          if ($env:TAILSCALE_AUTH_KEY) {
            $msi = Join-Path $env:TEMP "tailscale.msi"
            Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $msi
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i",$msi,"/quiet","/norestart" -Wait
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-gaming-$($env:GITHUB_RUN_ID)"
          }

      - name: Show info
        shell: pwsh
        run: |
          Write-Host "=== SETUP COMPLETE ==="
          Write-Host "User: $env:RUNNERADMIN_USER"
          Write-Host "Parola: $env:RUNNERADMIN_PASS"
          Write-Host "Launch helper: C:\Games\launch_msc_boost.ps1"
          Write-Host "SwiftShader fallback: C:\Games\GPU_SoftwareFallback (copy DLLs to game folder to force software renderer)"

      - name: Keepalive loop
        shell: pwsh
        run: |
          $it = ${env:KEEPALIVE_ITER}
          for ($i=0; $i -lt $it; $i++) {
            Write-Host ("Keepalive {0}/{1} - {2}" -f $i, $it, (Get-Date))
            Start-Sleep -Seconds 600
