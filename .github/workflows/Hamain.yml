name: Ultimate Extreme FPS Boost 30FPS Constant

on:
  workflow_dispatch:

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  KEEPALIVE_ITER: 432

jobs:
  ultimate-extreme-fps:
    runs-on: windows-2022
    timeout-minutes: 4320

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: NOTICE
        shell: pwsh
        run: |
          Write-Host "=== EXTREME SOFTWARE-ONLY FPS BOOST 30FPS CONSTANT ==="
          Write-Host "CPU RealTime, 50 virtual GPU threads, RAM caching, aggressive Windows tweaks"

      - name: Enable Remote Desktop
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0 -Force
          netsh advfirewall firewall add rule name='RDP-Allow' dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Ensure runneradmin user
        shell: pwsh
        run: |
          function GenPass { -join ((33..126) | Get-Random -Count 16 | % {[char]$_}) }
          $user='runneradmin'
          $existing=Get-LocalUser -Name $user -ErrorAction SilentlyContinue
          if(-not $existing){
            $secure=ConvertTo-SecureString (GenPass) -AsPlainText -Force
            try{ New-LocalUser -Name $user -Password $secure -FullName 'Runner Admin' -Description 'Auto-created' } catch {}
            try{ Add-LocalGroupMember -Group 'Administrators' -Member $user } catch {}
          }
          $newPass=GenPass
          $secure=ConvertTo-SecureString $newPass -AsPlainText -Force
          Set-LocalUser -Name $user -Password $secure
          Write-Output "RUNNERADMIN_USER=$user" >> $env:GITHUB_ENV
          Write-Output "RUNNERADMIN_PASS=$newPass" >> $env:GITHUB_ENV

      - name: Install DirectX / .NET / VC++
        shell: pwsh
        run: |
          $t=$env:TEMP
          $dx=Join-Path $t 'dx_redist.exe'
          Invoke-WebRequest 'https://download.microsoft.com/download/1/1/8/1187A7B7-6B28-42B2-A39B-33A3E0A1F7E0/directx_Jun2010_redist.exe' -OutFile $dx -UseBasicParsing
          Start-Process -FilePath $dx -ArgumentList '/Q' -Wait -NoNewWindow
          $dn=Join-Path $t 'ndp48.exe'
          Invoke-WebRequest 'https://go.microsoft.com/fwlink/?linkid=2088631' -OutFile $dn -UseBasicParsing
          Start-Process -FilePath $dn -ArgumentList '/q','/norestart' -Wait -NoNewWindow
          $vcx86=Join-Path $t 'vc_redist.x86.exe'
          $vcx64=Join-Path $t 'vc_redist.x64.exe'
          Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x86.exe' -OutFile $vcx86 -UseBasicParsing
          Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x64.exe' -OutFile $vcx64 -UseBasicParsing
          Start-Process -FilePath $vcx86 -ArgumentList '/install','/quiet','/norestart' -Wait -NoNewWindow
          Start-Process -FilePath $vcx64 -ArgumentList '/install','/quiet','/norestart' -Wait -NoNewWindow

      - name: Aggressive Windows + CPU + RAM Tweaks
        shell: pwsh
        run: |
          powercfg /S SCHEME_MIN
          $services=@('DiagTrack','WaaSMedicSvc','WSearch','SysMain','WerSvc','dmwappushservice','XblGameSave','RetailDemo','CDPUserSvc','MapsBroker','MessagingService')
          foreach($s in $services){if(Get-Service -Name $s -ErrorAction SilentlyContinue){Set-Service -Name $s -StartupType Disabled; Stop-Service -Force -Name $s}}
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" /v SystemResponsiveness /t REG_DWORD /d 0 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v Priority /t REG_DWORD /d 6 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v 'GPU Priority' /t REG_DWORD /d 10 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrDelay /t REG_DWORD /d 20 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrLevel /t REG_DWORD /d 0 /f

      - name: SwiftShader 50 Virtual GPU Threads + Shader Cache
        shell: pwsh
        run: |
          $t=Join-Path $env:TEMP 'swiftshader'
          New-Item -Path $t -ItemType Directory -Force | Out-Null
          $zip=Join-Path $env:TEMP 'SwiftShader-Release.zip'
          Invoke-WebRequest 'https://github.com/google/swiftshader/releases/latest/download/SwiftShader-Release.zip' -OutFile $zip -UseBasicParsing
          Expand-Archive -Path $zip -DestinationPath $t -Force
          $fallback='C:\Games\GPU_SoftwareFallback'
          New-Item -Path $fallback -ItemType Directory -Force | Out-Null
          1..50 | ForEach-Object { Get-ChildItem -Path $t -Filter '*.dll' -Recurse | ForEach-Object { Copy-Item $_.FullName -Destination "$fallback\thread$_" -Force } }

      - name: Launch Helper Ultra Extreme
        shell: pwsh
        run: |
          $script=@'
param(
  [string]$GameExe="C:\Program Files (x86)\Steam\steamapps\common\My Summer Car\MySummerCar.exe",
  [switch]$UseSwift
)
[System.GC]::Collect(); [System.GC]::WaitForPendingFinalizers()
if($UseSwift){
  $src="C:\Games\GPU_SoftwareFallback"
  if(Test-Path $src){Get-ChildItem $src -Recurse | ForEach-Object { Copy-Item $_.FullName -Destination (Split-Path $GameExe) -Force }}
}
$p=Start-Process -FilePath $GameExe -PassThru
Start-Sleep -Seconds 2
try{$p.PriorityClass="RealTime"} catch {}
try{$p.ProcessorAffinity=[System.IntPtr]::op_Explicit(0xFFFFFFFF)} catch {}
'@
          $path='C:\Games\launch_msc_ultimate_extreme.ps1'
          New-Item -Path (Split-Path $path) -ItemType Directory -Force | Out-Null
          Set-Content -Path $path -Value $script -Force -Encoding UTF8

      - name: Optional Parsec / Tailscale
        shell: pwsh
        run: |
          $pUrl='https://builds.parsecgaming.com/parsec-windows.exe'
          $pExe=Join-Path $env:TEMP 'parsec-windows.exe'
          Invoke-WebRequest -Uri $pUrl -OutFile $pExe -UseBasicParsing
          Start-Process -FilePath $pExe -ArgumentList '/S' -Wait -NoNewWindow
          if($env:TAILSCALE_AUTH_KEY){
            $msi=Join-Path $env:TEMP 'tailscale.msi'
            Invoke-WebRequest -Uri 'https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi' -OutFile $msi -UseBasicParsing
            Start-Process -FilePath 'msiexec.exe' -ArgumentList '/i',$msi,'/quiet','/norestart' -Wait -NoNewWindow
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-extreme-$($env:GITHUB_RUN_ID)"
          }

      - name: Show Info
        shell: pwsh
        run: |
          Write-Host '=== EXTREME 30FPS GOD MODE SETUP COMPLETE ==='
          Write-Host "User: $env:RUNNERADMIN_USER"
          Write-Host "Parola: $env:RUNNERADMIN_PASS"
          Write-Host 'Launch helper: C:\Games\launch_msc_ultimate_extreme.ps1'
          Write-Host 'SwiftShader fallback: C:\Games\GPU_SoftwareFallback'

      - name: Keepalive Loop 72h
        shell: pwsh
        run: |
          $it=[int]${{ env.KEEPALIVE_ITER }}
          for($i=0;$i -lt $it;$i++){
            Write-Host ("Keepalive {0}/{1} - {2}" -f $i,$it,(Get-Date))
            Start-Sleep -Seconds 600
