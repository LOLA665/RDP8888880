name: Windows RDP Gaming Server

on:
  workflow_dispatch:

jobs:
  rdp-gaming:
    runs-on: windows-2022
    timeout-minutes: 4320 # 72h (maxim permis)

    steps:
      - name: Enable RDP + Firewall + User Setup
        shell: pwsh
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

          # Create or reset user
          $user = $env:RUNNERADMIN_USER
          $pass = $env:RUNNERADMIN_PASS
          if (Get-LocalUser | Where-Object { $_.Name -eq $user }) {
            net user $user $pass
          } else {
            net user $user $pass /add
            net localgroup administrators $user /add
          }

      - name: Install dependencies (DirectX, .NET, VC++)
        shell: pwsh
        run: |
          $t=$env:TEMP

          # DirectX (June 2010)
          $dx=Join-Path $t 'directx_Jun2010_redist.exe'
          Invoke-WebRequest 'https://download.microsoft.com/download/8/4/A/84A35BF1-DAFE-4AE8-8280-9E7F4AA0AAB1/directx_Jun2010_redist.exe' -OutFile $dx
          Start-Process $dx -ArgumentList '/Q' -Wait

          # .NET Framework 4.8
          $dn=Join-Path $t 'ndp48.exe'
          Invoke-WebRequest 'https://go.microsoft.com/fwlink/?linkid=2088631' -OutFile $dn
          Start-Process $dn -ArgumentList '/q','/norestart' -Wait

          # VC++ 2019
          $vcx86=Join-Path $t 'vc_redist.x86.exe'
          $vcx64=Join-Path $t 'vc_redist.x64.exe'
          Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x86.exe' -OutFile $vcx86
          Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x64.exe' -OutFile $vcx64
          Start-Process $vcx86 -ArgumentList '/install','/quiet','/norestart' -Wait
          Start-Process $vcx64 -ArgumentList '/install','/quiet','/norestart' -Wait

      - name: Gaming FPS Optimizations
        shell: pwsh
        run: |
          powercfg /S SCHEME_MIN
          # Disable unneeded services
          $services=@('WSearch','SysMain','WerSvc','dmwappushservice','XblGameSave','RetailDemo','CDPUserSvc','MapsBroker','MessagingService')
          foreach ($s in $services) {
            try {
              Set-Service -Name $s -StartupType Disabled -ErrorAction Stop
              Stop-Service -Name $s -Force
            } catch {}
          }
          # Registry tweaks
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" /v SystemResponsiveness /t REG_DWORD /d 0 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v Priority /t REG_DWORD /d 6 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v "GPU Priority" /t REG_DWORD /d 10 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrDelay /t REG_DWORD /d 20 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrLevel /t REG_DWORD /d 0 /f

      - name: Install Tailscale
        shell: pwsh
        run: |
          Invoke-WebRequest https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi -OutFile $env:TEMP\tailscale.msi
          Start-Process msiexec.exe -ArgumentList '/i',$env:TEMP\tailscale.msi,'/quiet','/norestart' -Wait
          & 'C:\Program Files\Tailscale\tailscale.exe' up --authkey $env:TAILSCALE_AUTH_KEY --accept-routes

      - name: Show RDP connection info
        shell: pwsh
        run: |
          Write-Output "=== RDP CONNECTION INFO ==="
          Write-Output "User: $env:RUNNERADMIN_USER"
          Write-Output "Pass: $env:RUNNERADMIN_PASS"
          $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.InterfaceAlias -notlike "Loopback*"} | Select-Object -First 1).IPAddress
          Write-Output "IP: $ip"

      - name: Keep alive
        shell: pwsh
        run: |
          for ($i=0; $i -lt $env:KEEPALIVE_ITER; $i++) {
            Write-Output "Keep alive $i"
            Start-Sleep -Seconds 600
          }
    env:
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      RUNNERADMIN_USER: runneradmin
      RUNNERADMIN_PASS: ${{ secrets.RUNNERADMIN_PASS }}
      KEEPALIVE_ITER: 432
