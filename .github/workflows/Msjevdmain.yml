name: RDP Gaming Server Windows MAX BOOST

on:
  workflow_dispatch:

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  KEEPALIVE_ITER: 432  # 432*10min = 72h

jobs:
  rdp-gaming-boost:
    runs-on: windows-2022
    timeout-minutes: 4320

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: NOTICE
        shell: pwsh
        run: |
          Write-Host "ATENȚIE: Acest workflow face optimizări software pentru gaming (DirectX, .NET, VC++, SwiftShader) și boost Windows."
          Write-Host "Nu folosește passthrough hardware neautorizat."

      - name: Activate Remote Desktop
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Allow" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Ensure runneradmin user exists & reset password
        shell: pwsh
        run: |
          function GenPass { -join ((33..126) | Get-Random -Count 16 | % {[char]$_}) }
          $user="runneradmin"
          $existing = Get-LocalUser -Name $user -ErrorAction SilentlyContinue
          $newPass = GenPass
          $secure = ConvertTo-SecureString $newPass -AsPlainText -Force

          if ($existing) {
            try { Set-LocalUser -Name $user -Password $secure -ErrorAction Stop } catch { Write-Warning "Cannot reset password: $_" }
          } else {
            try { New-LocalUser -Name $user -Password $secure -FullName "Runner Admin" -Description "Auto-created" } catch { Write-Warning "Cannot create user: $_" }
            try { Add-LocalGroupMember -Group "Administrators" -Member $user } catch { Write-Warning "Cannot add to Admins: $_" }
          }

          Write-Output "RUNNERADMIN_USER=$user" >> $env:GITHUB_ENV
          Write-Output "RUNNERADMIN_PASS=$newPass" >> $env:GITHUB_ENV
          Write-Host "User $user setup complete. Password exported to env."

      - name: Install Core Runtimes
        shell: pwsh
        run: |
          $t=$env:TEMP

          # DirectX 2010
          $dx = Join-Path $t 'dx_redist.exe'
          try {
            Invoke-WebRequest -Uri "https://download.microsoft.com/download/1/1/8/1187A7B7-6B28-42B2-A39B-33A3E0A1F7E0/directx_Jun2010_redist.exe" -OutFile $dx -UseBasicParsing
            Start-Process -FilePath $dx -ArgumentList '/Q' -Wait -NoNewWindow
          } catch { Write-Warning "DirectX download/install failed: $_" }

          # .NET Framework 4.8
          $dn = Join-Path $t 'ndp48.exe'
          try {
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2088631" -OutFile $dn -UseBasicParsing
            Start-Process -FilePath $dn -ArgumentList '/q','/norestart' -Wait -NoNewWindow
          } catch { Write-Warning ".NET install failed: $_" }

          # VC++ Redistributables
          $vcx86=Join-Path $t 'vc_redist.x86.exe'
          $vcx64=Join-Path $t 'vc_redist.x64.exe'
          try {
            Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x86.exe' -OutFile $vcx86 -UseBasicParsing
            Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x64.exe' -OutFile $vcx64 -UseBasicParsing
            Start-Process -FilePath $vcx86 -ArgumentList '/install','/quiet','/norestart' -Wait -NoNewWindow
            Start-Process -FilePath $vcx64 -ArgumentList '/install','/quiet','/norestart' -Wait -NoNewWindow
          } catch { Write-Warning "VC++ install failed: $_" }

      - name: Aggressive Windows FPS / GPU Tweaks
        shell: pwsh
        run: |
          try { powercfg /S SCHEME_MIN } catch {}
          $services=@('WSearch','SysMain','WerSvc','dmwappushservice','XblGameSave','RetailDemo','CDPUserSvc','MapsBroker','MessagingService')
          foreach($s in $services){
            try {
              $svc=Get-Service -Name $s -ErrorAction Stop
              Set-Service -Name $s -StartupType Disabled
              Stop-Service -Name $s -Force
            } catch { Write-Warning "Cannot modify service $s" }
          }

          # Registry FPS/Performance tweaks
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" /v SystemResponsiveness /t REG_DWORD /d 0 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v Priority /t REG_DWORD /d 6 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v "GPU Priority" /t REG_DWORD /d 10 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrDelay /t REG_DWORD /d 20 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrLevel /t REG_DWORD /d 0 /f

      - name: Install SwiftShader Fallback
        shell: pwsh
        run: |
          $t=Join-Path $env:TEMP "swiftshader"
          New-Item -Path $t -ItemType Directory -Force
          $zip=Join-Path $env:TEMP "SwiftShader.zip"
          Invoke-WebRequest -Uri "https://github.com/google/swiftshader/releases/latest/download/SwiftShader-Release.zip" -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $t -Force
          $fallback="C:\Games\GPU_SoftwareFallback"
          New-Item -Path $fallback -ItemType Directory -Force
          Get-ChildItem $t -Filter "*.dll" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination $fallback -Force }

      - name: Launch Helper Script
        shell: pwsh
        run: |
          $script=@'
param([string]$GameExe="C:\Program Files (x86)\Steam\steamapps\common\My Summer Car\MySummerCar.exe",[switch]$UseSwift)
if ($UseSwift){
  $src="C:\Games\GPU_SoftwareFallback"
  if (Test-Path $src){
    Get-ChildItem $src -Filter *.dll | ForEach-Object { Copy-Item -Path $_.FullName -Destination (Split-Path $GameExe) -Force }
  }
}
Start-Process -FilePath $GameExe
Start-Sleep -Seconds 4
$p=Get-Process -Name "MySummerCar" -ErrorAction SilentlyContinue
if ($p){ $p.PriorityClass="High" }
'@
          $path="C:\Games\launch_msc_boost.ps1"
          New-Item -Path (Split-Path $path) -ItemType Directory -Force
          Set-Content -Path $path -Value $script -Force -Encoding UTF8

      - name: Install Tailscale
        shell: pwsh
        run: |
          if ($env:TAILSCALE_AUTH_KEY){
            $msi=Join-Path $env:TEMP "tailscale.msi"
            Invoke-WebRequest "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $msi
            Start-Process msiexec.exe -ArgumentList "/i",$msi,"/quiet","/norestart" -Wait
            & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-gaming-$($env:GITHUB_RUN_ID)"
          }

      - name: Show info
        shell: pwsh
        run: |
          Write-Host "=== SETUP COMPLETE ==="
          Write-Host "User: $env:RUNNERADMIN_USER"
          Write-Host "Password: $env:RUNNERADMIN_PASS"
          if (Test-Path "$env:ProgramFiles\Tailscale\tailscale.exe"){
            try { $ip=& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4; Write-Host "Tailscale IP: $ip" } catch {}
          }
          Write-Host "Launch helper: C:\Games\launch_msc_boost.ps1"
          Write-Host "SwiftShader fallback: C:\Games\GPU_SoftwareFallback"

      - name: Keepalive loop
        shell: pwsh
        run: |
          $it=${env:KEEPALIVE_ITER}
          for ($i=0; $i -lt $it; $i++){
            Write-Host ("Keepalive {0}/{1} - {2}" -f $i,$it,(Get-Date))
            Start-Sleep -Seconds 600
