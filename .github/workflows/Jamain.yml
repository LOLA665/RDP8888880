name: MAX FPS Boost + RunnerAdmin + Tailscale

on:
  workflow_dispatch:

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  KEEPALIVE_ITER: 432
  RUNNERADMIN_USER: runneradmin
  RUNNERADMIN_PASS: >-
    *yB)9TnGro(3\"j?

jobs:
  fps-boost-rdp:
    runs-on: windows-2022
    timeout-minutes: 4320

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure runneradmin user
        shell: pwsh
        run: |
          $user = $env:RUNNERADMIN_USER
          $pass = $env:RUNNERADMIN_PASS
          $secure = ConvertTo-SecureString $pass -AsPlainText -Force
          $existing = Get-LocalUser -Name $user -ErrorAction SilentlyContinue
          if ($existing) {
            try { Set-LocalUser -Name $user -Password $secure } catch {}
          } else {
            New-LocalUser -Name $user -Password $secure -FullName 'Runner Admin' -Description 'Auto-created'
            Add-LocalGroupMember -Group 'Administrators' -Member $user
          }
          Write-Host "User ready: $user | Password: $pass"

      - name: Aggressive Windows FPS Tweaks
        shell: pwsh
        run: |
          try { powercfg /S SCHEME_MIN } catch {}
          $services=@('WSearch','SysMain','WerSvc','dmwappushservice','XblGameSave','RetailDemo','CDPUserSvc','MapsBroker','MessagingService')
          foreach($s in $services){
            try {
              $svc=Get-Service -Name $s -ErrorAction Stop
              Set-Service -Name $s -StartupType Disabled
              Stop-Service -Name $s -Force
            } catch { Write-Warning ("Cannot modify service {0}: {1}" -f $s, $_.Exception.Message) }
          }
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile" /v SystemResponsiveness /t REG_DWORD /d 0 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v Priority /t REG_DWORD /d 6 /f
          reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Multimedia\SystemProfile\Tasks\Games" /v "GPU Priority" /t REG_DWORD /d 10 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrDelay /t REG_DWORD /d 20 /f
          reg add "HKLM\SYSTEM\CurrentControlSet\Control\GraphicsDrivers" /v TdrLevel /t REG_DWORD /d 0 /f

      - name: Install DirectX, .NET, VC++
        shell: pwsh
        run: |
          $t=$env:TEMP
          $dx=Join-Path $t 'dx_redist.exe'
          Invoke-WebRequest 'https://download.microsoft.com/download/1/1/8/1187A7B7-6B28-42B2-A39B-33A3E0A1F7E0/directx_Jun2010_redist.exe' -OutFile $dx -UseBasicParsing
          Start-Process -FilePath $dx -ArgumentList '/Q' -Wait -NoNewWindow
          $dn=Join-Path $t 'ndp48.exe'
          Invoke-WebRequest 'https://go.microsoft.com/fwlink/?linkid=2088631' -OutFile $dn -UseBasicParsing
          Start-Process -FilePath $dn -ArgumentList '/q','/norestart' -Wait -NoNewWindow
          $vcx86=Join-Path $t 'vc_redist.x86.exe'
          $vcx64=Join-Path $t 'vc_redist.x64.exe'
          Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x86.exe' -OutFile $vcx86 -UseBasicParsing
          Invoke-WebRequest 'https://aka.ms/vs/17/release/vc_redist.x64.exe' -OutFile $vcx64 -UseBasicParsing
          Start-Process -FilePath $vcx86 -ArgumentList '/install','/quiet','/norestart' -Wait -NoNewWindow
          Start-Process -FilePath $vcx64 -ArgumentList '/install','/quiet','/norestart' -Wait -NoNewWindow

      - name: Install SwiftShader (GPU software fallback)
        shell: pwsh
        run: |
          $t = Join-Path $env:TEMP "swiftshader"
          New-Item -Path $t -ItemType Directory -Force
          $zip = Join-Path $env:TEMP "SwiftShader-Release.zip"
          Invoke-WebRequest -Uri "https://github.com/google/swiftshader/releases/latest/download/SwiftShader-Release.zip" -OutFile $zip -UseBasicParsing
          Expand-Archive -Path $zip -DestinationPath $t -Force
          $fallback = "C:\Games\GPU_SoftwareFallback"
          New-Item -Path $fallback -ItemType Directory -Force
          Get-ChildItem -Path $t -Filter "*.dll" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination $fallback -Force }

      - name: Install & Configure Tailscale
        shell: pwsh
        run: |
          $msi = Join-Path $env:TEMP "tailscale.msi"
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" -OutFile $msi
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i",$msi,"/quiet","/norestart" -Wait
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=$env:TAILSCALE_AUTH_KEY --hostname="gh-gaming-$($env:GITHUB_RUN_ID)"

      - name: Show access info
        shell: pwsh
        run: |
          $user = $env:RUNNERADMIN_USER
          $pass = $env:RUNNERADMIN_PASS
          $tsIP = ""
          try { $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4; $tsIP = $tsIP.Trim() } catch {}
          Write-Host "=== ACCESS INFO ==="
          Write-Host "User: $user"
          Write-Host "Password: $pass"
          if ($tsIP) { Write-Host "Tailscale IP: $tsIP" } else { Write-Host "Tailscale IP: (unavailable)" }
          Write-Host "==================="

      - name: Keepalive 72h
        shell: pwsh
        run: |
          $it=[int]${{ env.KEEPALIVE_ITER }}
          for($i=0;$i -lt $it;$i++){
            Write-Host ("Keepalive {0}/{1} - {2}" -f $i,$it,(Get-Date))
            Start-Sleep -Seconds 600
          }
